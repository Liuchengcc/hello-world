#ifndef MARCROLY_H
#define MARCROLY_H

#define CAT_2_TOKEN(TOKEN1,TOKEN2) TOKEN1##TOKEN2
#define STRING(TOKEN) #TOKEN
#define STRING_LATER(TOKEN) STRING(TOKEN)

#define POINTFILE "Points.pt"
#define USERFILE "Users.cr"
#define TOOLFILE "Tools.cr"
#define SETTING_AXIS_FILE   "axis.json"
#define SETTING_AXIS_FILE_OBJ AxisConfigForm
#define INSTANCE_SCARA_FILE "scara.ist"
#define INSTANCE_SCARA_FILE_OBJ ScaraConfigForm
#define INSTANCE_PUMA_FILE  "puma.ist"
#define INSTANCE_PUMA_FILE_OBJ PumaConfigForm
#define INSTANCE_MODULE_FILE  "module.ist"
#define INSTANCE_MODULE_OBJ ModuleConfigForm

#define ERROR_OCCUR qDebug()<<"error occur!"<<__LINE__<<__FILE__;return;
#define DECL_SIGNAL_METADATA(OBJ_TYPE, OBJ_NAME)\
    void change_##OBJ_NAME(OBJ_TYPE);
#define REGISTER_METADATA(OBJ_TYPE, OBJ_NAME)\
public:\
inline OBJ_TYPE get_##OBJ_NAME()\
        {\
           return OBJ_NAME;\
        };\
inline void set_##OBJ_NAME(const OBJ_TYPE &tempData)\
    {\
        OBJ_NAME = tempData;\
        emit change_##OBJ_NAME(OBJ_NAME);\
    };\
private:\
        OBJ_TYPE OBJ_NAME;

#define DO_FOREACH_ELEMENT(NUM, FUNC, ...) DO_FOREACH_ELEMENT_##NUM(FUNC, __VA_ARGS__)
#define DO_FOREACH_ELEMENT_1(FUNC, ELEMENT) FUNC(ELEMENT)
#define DO_FOREACH_ELEMENT_2(FUNC, ELEMENT, ...) FUNC(ELEMENT); DO_FOREACH_ELEMENT_1(FUNC, __VA_ARGS__)
#define DO_FOREACH_ELEMENT_3(FUNC, ELEMENT, ...) FUNC(ELEMENT); DO_FOREACH_ELEMENT_2(FUNC, __VA_ARGS__)
#define DO_FOREACH_ELEMENT_4(FUNC, ELEMENT, ...) FUNC(ELEMENT); DO_FOREACH_ELEMENT_3(FUNC, __VA_ARGS__)
#define DO_FOREACH_ELEMENT_5(FUNC, ELEMENT, ...) FUNC(ELEMENT); DO_FOREACH_ELEMENT_4(FUNC, __VA_ARGS__)
#define DO_FOREACH_ELEMENT_6(FUNC, ELEMENT, ...) FUNC(ELEMENT); DO_FOREACH_ELEMENT_5(FUNC, __VA_ARGS__)
#define DO_FOREACH_ELEMENT_7(FUNC, ELEMENT, ...) FUNC(ELEMENT); DO_FOREACH_ELEMENT_6(FUNC, __VA_ARGS__)
#define DO_FOREACH_ELEMENT_8(FUNC, ELEMENT, ...) FUNC(ELEMENT); DO_FOREACH_ELEMENT_7(FUNC, __VA_ARGS__)
#define DO_FOREACH_ELEMENT_9(FUNC, ELEMENT, ...) FUNC(ELEMENT); DO_FOREACH_ELEMENT_8(FUNC, __VA_ARGS__)


#define DO_FOREACH_IN_AXIS_INDEX_LATER(NUM, FUNC) DO_FOREACH_IN_AXIS_INDEX(NUM, FUNC)
#define DO_FOREACH_IN_AXIS_INDEX(NUM, FUNC)  DO_FOREACH_IN_AXIS_INDEX_##NUM(FUNC)
#define DO_FOREACH_IN_AXIS_INDEX_1(FUNC) FUNC(J1, 0);
#define DO_FOREACH_IN_AXIS_INDEX_2(FUNC) DO_FOREACH_IN_AXIS_INDEX_1(FUNC);FUNC(J2, 1)
#define DO_FOREACH_IN_AXIS_INDEX_3(FUNC) DO_FOREACH_IN_AXIS_INDEX_2(FUNC);FUNC(J3, 2)
#define DO_FOREACH_IN_AXIS_INDEX_4(FUNC) DO_FOREACH_IN_AXIS_INDEX_3(FUNC);FUNC(J4, 3)
#define DO_FOREACH_IN_AXIS_INDEX_5(FUNC) DO_FOREACH_IN_AXIS_INDEX_4(FUNC);FUNC(J5, 4)
#define DO_FOREACH_IN_AXIS_INDEX_6(FUNC) DO_FOREACH_IN_AXIS_INDEX_5(FUNC);FUNC(J6, 5)
#define DO_FOREACH_IN_AXIS_INDEX_7(FUNC) DO_FOREACH_IN_AXIS_INDEX_6(FUNC);FUNC(J7, 6)
#define DO_FOREACH_IN_AXIS_INDEX_8(FUNC) DO_FOREACH_IN_AXIS_INDEX_7(FUNC);FUNC(J8, 7)
#define DO_FOREACH_IN_AXIS_INDEX_9(FUNC) DO_FOREACH_IN_AXIS_INDEX_8(FUNC);FUNC(J9, 8)

#define DO_FOREACH_AXIS_SUM_LATER(AXIS_SUM, FUNC) DO_FOREACH_AXIS_SUM(AXIS_SUM, FUNC)
#define DO_FOREACH_AXIS_SUM(AXIS_SUM, FUNC) DO_FOREACH_AXIS_SUM_##AXIS_SUM(FUNC)
#define DO_FOREACH_AXIS_SUM_1(FUNC) FUNC(1);
#define DO_FOREACH_AXIS_SUM_2(FUNC) DO_FOREACH_AXIS_SUM_1(FUNC);FUNC(2)
#define DO_FOREACH_AXIS_SUM_3(FUNC) DO_FOREACH_AXIS_SUM_2(FUNC);FUNC(3)
#define DO_FOREACH_AXIS_SUM_4(FUNC) DO_FOREACH_AXIS_SUM_3(FUNC);FUNC(4)
#define DO_FOREACH_AXIS_SUM_5(FUNC) DO_FOREACH_AXIS_SUM_4(FUNC);FUNC(5)
#define DO_FOREACH_AXIS_SUM_6(FUNC) DO_FOREACH_AXIS_SUM_5(FUNC);FUNC(6)
#define DO_FOREACH_AXIS_SUM_7(FUNC) DO_FOREACH_AXIS_SUM_6(FUNC);FUNC(7)
#define DO_FOREACH_AXIS_SUM_8(FUNC) DO_FOREACH_AXIS_SUM_7(FUNC);FUNC(8)
#define DO_FOREACH_AXIS_SUM_9(FUNC) DO_FOREACH_AXIS_SUM_8(FUNC);FUNC(9)


#define DO_ONCE(detail) static bool isFirstRun = true;\
    if(isFirstRun){isFirstRun = false;detail;}
#define SET_TEXT(QOBJ_PTR, TEXT)\
    if(qobject_cast<QComboBox*>(QOBJ_PTR)){qobject_cast<QComboBox*>(QOBJ_PTR)->addItems(tr(TEXT).split(" "));}\
    else if(qobject_cast<QLineEdit*>(QOBJ_PTR)){qobject_cast<QLineEdit*>(QOBJ_PTR)->setText(tr(TEXT));}\
    else if(qobject_cast<QPushButton*>(QOBJ_PTR)){qobject_cast<QPushButton*>(QOBJ_PTR)->setText(tr(TEXT));}\
    else if(qobject_cast<QLabel*>(QOBJ_PTR)){qobject_cast<QLabel*>(QOBJ_PTR)->setText(tr(TEXT));}\
    else if(qobject_cast<QCheckBox*>(QOBJ_PTR)){qobject_cast<QCheckBox*>(QOBJ_PTR)->setText(tr(TEXT));}

#define INSTANCE_MODE(INS_OBJ, INS_PTR) INS_OBJ* INS_OBJ::INS_PTR = nullptr;\
INS_OBJ* INS_OBJ::getInstance(){if(!INS_PTR){INS_PTR = new INS_OBJ;}return INS_PTR;}

#define DEBUG(detail) if(IS_DEBUG)qDebug()<<__FILE__<<__LINE__<<detail;
#endif // MARCROLY_H
